{"ast":null,"code":"var _jsxFileName = \"/Users/ben/StratGO/frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\n\n// Letter frequencies for board generation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst letterFrequencies = [{\n  letter: 'E',\n  freq: 12.7\n}, {\n  letter: 'T',\n  freq: 9.1\n}, {\n  letter: 'A',\n  freq: 8.2\n}, {\n  letter: 'O',\n  freq: 7.5\n}, {\n  letter: 'I',\n  freq: 7.0\n}, {\n  letter: 'N',\n  freq: 6.7\n}, {\n  letter: 'S',\n  freq: 6.3\n}, {\n  letter: 'H',\n  freq: 6.1\n}, {\n  letter: 'R',\n  freq: 6.0\n}, {\n  letter: 'D',\n  freq: 4.3\n}, {\n  letter: 'L',\n  freq: 4.0\n}, {\n  letter: 'C',\n  freq: 2.8\n}, {\n  letter: 'U',\n  freq: 2.8\n}, {\n  letter: 'M',\n  freq: 2.4\n}, {\n  letter: 'W',\n  freq: 2.4\n}, {\n  letter: 'F',\n  freq: 2.2\n}, {\n  letter: 'G',\n  freq: 2.0\n}, {\n  letter: 'Y',\n  freq: 2.0\n}, {\n  letter: 'P',\n  freq: 1.9\n}, {\n  letter: 'B',\n  freq: 1.5\n}, {\n  letter: 'V',\n  freq: 1.0\n}, {\n  letter: 'K',\n  freq: 0.8\n}, {\n  letter: 'J',\n  freq: 0.15\n}, {\n  letter: 'X',\n  freq: 0.15\n}, {\n  letter: 'Q',\n  freq: 0.10\n}, {\n  letter: 'Z',\n  freq: 0.07\n}];\nconst weightedLetters = [];\nletterFrequencies.forEach(({\n  letter,\n  freq\n}) => {\n  for (let i = 0; i < Math.round(freq * 10); i++) weightedLetters.push(letter);\n});\nfunction getRandomLetter() {\n  return weightedLetters[Math.floor(Math.random() * weightedLetters.length)];\n}\nfunction generateBoard(size = 19) {\n  return Array.from({\n    length: size\n  }, (_, i) => Array.from({\n    length: size\n  }, (_, j) => getRandomLetter()));\n}\nconst scoreTable = {\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 6,\n  6: 8,\n  7: 11,\n  8: 14,\n  9: 19,\n  10: 24\n};\nfunction getScore(word) {\n  if (word.length >= 11) return 30;\n  return scoreTable[word.length] || 0;\n}\nfunction areAdjacent(a, b) {\n  const [x1, y1] = a;\n  const [x2, y2] = b;\n  return Math.abs(x1 - x2) <= 1 && Math.abs(y1 - y2) <= 1 && !(x1 === x2 && y1 === y2);\n}\nfunction isContiguous(selected) {\n  if (selected.length <= 1) return true;\n  const visited = new Set();\n  function dfs(cell) {\n    visited.add(cell.join(','));\n    for (const next of selected) {\n      if (!visited.has(next.join(',')) && areAdjacent(cell, next)) dfs(next);\n    }\n  }\n  dfs(selected[0]);\n  return visited.size === selected.length;\n}\nconst center = [9, 9];\nfunction App() {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [turn, setTurn] = useState('Player 1');\n  const [selected, setSelected] = useState([]);\n  const [error, setError] = useState(null);\n  const [moves, setMoves] = useState([]);\n  const [scores, setScores] = useState({\n    'Player 1': 0,\n    'Player 2': 0\n  });\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [dictionary, setDictionary] = useState(null);\n  useEffect(() => {\n    setBoard(generateBoard());\n    // Load dictionary\n    fetch('/words_alpha.txt').then(res => res.text()).then(text => {\n      const words = text.split(/\\r?\\n/).map(w => w.trim().toUpperCase());\n      setDictionary(new Set(words));\n    });\n  }, []);\n\n  // Get the word from selected cells in order\n  const selectedWord = selected.map(([i, j]) => {\n    var _board$i;\n    return ((_board$i = board[i]) === null || _board$i === void 0 ? void 0 : _board$i[j]) || '';\n  }).join('');\n\n  // Handle cell click\n  const handleCellClick = (i, j) => {\n    if (gameOver) return;\n    const idx = selected.findIndex(([x, y]) => x === i && y === j);\n    let newSelected;\n    if (idx !== -1) {\n      newSelected = selected.slice(0, idx).concat(selected.slice(idx + 1));\n    } else {\n      newSelected = [...selected, [i, j]];\n    }\n    setSelected(newSelected);\n    setError(null);\n  };\n\n  // Handle submit\n  const handleSubmit = () => {\n    if (gameOver) return;\n    if (selected.length < 2) {\n      setError('Word must be at least 2 letters.');\n      return;\n    }\n    if (!isContiguous(selected)) {\n      setError('Selected letters must be contiguous.');\n      return;\n    }\n    if (moves.length === 0 && !selected.some(([i, j]) => i === center[0] && j === center[1])) {\n      setError('First word must include the center square.');\n      return;\n    }\n    if (!dictionary) {\n      setError('Dictionary not loaded yet.');\n      return;\n    }\n    const word = selectedWord.toUpperCase();\n    if (!dictionary.has(word)) {\n      setError('Word not in dictionary.');\n      return;\n    }\n    const score = getScore(word);\n    setMoves([...moves, {\n      player: turn,\n      word,\n      positions: [...selected],\n      score\n    }]);\n    setScores(s => ({\n      ...s,\n      [turn]: s[turn] + score\n    }));\n    setTurn(turn === 'Player 1' ? 'Player 2' : 'Player 1');\n    setSelected([]);\n    setError(null);\n  };\n\n  // End game logic (simple: after 30 moves or manual end)\n  useEffect(() => {\n    if (moves.length >= 30) {\n      setGameOver(true);\n      if (scores['Player 1'] > scores['Player 2']) setWinner('Player 1');else if (scores['Player 2'] > scores['Player 1']) setWinner('Player 2');else setWinner('Draw');\n    }\n  }, [moves, scores]);\n  const handleEndGame = () => {\n    setGameOver(true);\n    if (scores['Player 1'] > scores['Player 2']) setWinner('Player 1');else if (scores['Player 2'] > scores['Player 1']) setWinner('Player 2');else setWinner('Draw');\n  };\n  const handleRestart = () => {\n    setBoard(generateBoard());\n    setTurn('Player 1');\n    setSelected([]);\n    setError(null);\n    setMoves([]);\n    setScores({\n      'Player 1': 0,\n      'Player 2': 0\n    });\n    setGameOver(false);\n    setWinner(null);\n  };\n\n  // Helper to get cell color based on moves\n  function getCellColor(i, j, moves) {\n    // Find the most recent move that includes this cell\n    for (let k = moves.length - 1; k >= 0; k--) {\n      if (moves[k].positions.some(([x, y]) => x === i && y === j)) {\n        return moves[k].player === 'Player 1' ? '#ffcccc' : '#cce0ff'; // red for P1, blue for P2\n      }\n    }\n    // Center square highlight\n    if (i === center[0] && j === center[1]) return '#ffe680';\n    return '#fff';\n  }\n  const isCellClaimed = (i, j, moves) => {\n    return moves.some(move => move.positions.some(([x, y]) => x === i && y === j));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Word Strategy Game (Local Two-Player)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Current Turn:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 12\n      }, this), \" \", turn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Scores:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), \" Player 1: \", scores['Player 1'], \" | Player 2: \", scores['Player 2']]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#eee',\n        padding: 20,\n        borderRadius: 8,\n        margin: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), winner === 'Draw' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"It's a draw!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 37\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 32\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [winner, \" wins!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 80\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 75\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'inline-block',\n        border: '2px solid #333',\n        marginTop: 20\n      },\n      children: board.map((row, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        children: row.map((cell, j) => {\n          const isSelected = selected.some(([x, y]) => x === i && y === j);\n          const claimed = isCellClaimed(i, j, moves);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => {\n              if (!claimed) handleCellClick(i, j);\n            },\n            style: {\n              width: 28,\n              height: 28,\n              border: '1px solid #aaa',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              fontWeight: 'bold',\n              fontSize: 18,\n              background: isSelected ? '#90ee90' : getCellColor(i, j, moves),\n              cursor: claimed || gameOver ? 'not-allowed' : 'pointer',\n              userSelect: 'none',\n              opacity: claimed ? 0.6 : 1\n            },\n            children: cell\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 17\n          }, this);\n        })\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Selected Word:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), \" \", selectedWord]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: selected.length === 0 || gameOver,\n      style: {\n        marginTop: 10\n      },\n      children: \"Submit Word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEndGame,\n      style: {\n        marginLeft: 10\n      },\n      children: \"End Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginTop: 10\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 30,\n        textAlign: 'left',\n        maxWidth: 600,\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Move History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves.map((move, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [move.player, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), \" \", move.word, \" (\", move.score, \" pts)\"]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Moin7fnmYEMGVROSjC8zoMPU0d0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","letterFrequencies","letter","freq","weightedLetters","forEach","i","Math","round","push","getRandomLetter","floor","random","length","generateBoard","size","Array","from","_","j","scoreTable","getScore","word","areAdjacent","a","b","x1","y1","x2","y2","abs","isContiguous","selected","visited","Set","dfs","cell","add","join","next","has","center","App","_s","board","setBoard","turn","setTurn","setSelected","error","setError","moves","setMoves","scores","setScores","gameOver","setGameOver","winner","setWinner","dictionary","setDictionary","fetch","then","res","text","words","split","map","w","trim","toUpperCase","selectedWord","_board$i","handleCellClick","idx","findIndex","x","y","newSelected","slice","concat","handleSubmit","some","score","player","positions","s","handleEndGame","handleRestart","getCellColor","k","isCellClaimed","move","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","margin","background","padding","borderRadius","onClick","display","border","marginTop","row","isSelected","claimed","width","height","alignItems","justifyContent","fontWeight","fontSize","cursor","userSelect","opacity","disabled","marginLeft","color","textAlign","maxWidth","marginRight","_c","$RefreshReg$"],"sources":["/Users/ben/StratGO/frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\n// Letter frequencies for board generation\nconst letterFrequencies = [\n  { letter: 'E', freq: 12.7 }, { letter: 'T', freq: 9.1 }, { letter: 'A', freq: 8.2 },\n  { letter: 'O', freq: 7.5 }, { letter: 'I', freq: 7.0 }, { letter: 'N', freq: 6.7 },\n  { letter: 'S', freq: 6.3 }, { letter: 'H', freq: 6.1 }, { letter: 'R', freq: 6.0 },\n  { letter: 'D', freq: 4.3 }, { letter: 'L', freq: 4.0 }, { letter: 'C', freq: 2.8 },\n  { letter: 'U', freq: 2.8 }, { letter: 'M', freq: 2.4 }, { letter: 'W', freq: 2.4 },\n  { letter: 'F', freq: 2.2 }, { letter: 'G', freq: 2.0 }, { letter: 'Y', freq: 2.0 },\n  { letter: 'P', freq: 1.9 }, { letter: 'B', freq: 1.5 }, { letter: 'V', freq: 1.0 },\n  { letter: 'K', freq: 0.8 }, { letter: 'J', freq: 0.15 }, { letter: 'X', freq: 0.15 },\n  { letter: 'Q', freq: 0.10 }, { letter: 'Z', freq: 0.07 },\n];\nconst weightedLetters: string[] = [];\nletterFrequencies.forEach(({ letter, freq }) => {\n  for (let i = 0; i < Math.round(freq * 10); i++) weightedLetters.push(letter);\n});\nfunction getRandomLetter() {\n  return weightedLetters[Math.floor(Math.random() * weightedLetters.length)];\n}\nfunction generateBoard(size = 19) {\n  return Array.from({ length: size }, (_, i) =>\n    Array.from({ length: size }, (_, j) => getRandomLetter())\n  );\n}\n\nconst scoreTable: { [len: number]: number } = {\n  2: 2, 3: 3, 4: 4, 5: 6, 6: 8, 7: 11, 8: 14, 9: 19, 10: 24\n};\nfunction getScore(word: string) {\n  if (word.length >= 11) return 30;\n  return scoreTable[word.length] || 0;\n}\n\nfunction areAdjacent(a: [number, number], b: [number, number]) {\n  const [x1, y1] = a;\n  const [x2, y2] = b;\n  return Math.abs(x1 - x2) <= 1 && Math.abs(y1 - y2) <= 1 && !(x1 === x2 && y1 === y2);\n}\nfunction isContiguous(selected: [number, number][]) {\n  if (selected.length <= 1) return true;\n  const visited = new Set<string>();\n  function dfs(cell: [number, number]) {\n    visited.add(cell.join(','));\n    for (const next of selected) {\n      if (!visited.has(next.join(',')) && areAdjacent(cell, next)) dfs(next);\n    }\n  }\n  dfs(selected[0]);\n  return visited.size === selected.length;\n}\n\nconst center = [9, 9];\n\nfunction App() {\n  const [board, setBoard] = useState<string[][]>([]);\n  const [turn, setTurn] = useState<'Player 1' | 'Player 2'>('Player 1');\n  const [selected, setSelected] = useState<[number, number][]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [moves, setMoves] = useState<{ player: string, word: string, positions: [number, number][], score: number }[]>([]);\n  const [scores, setScores] = useState<{ [player: string]: number }>({ 'Player 1': 0, 'Player 2': 0 });\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState<string | null>(null);\n  const [dictionary, setDictionary] = useState<Set<string> | null>(null);\n\n  useEffect(() => {\n    setBoard(generateBoard());\n    // Load dictionary\n    fetch('/words_alpha.txt')\n      .then(res => res.text())\n      .then(text => {\n        const words = text.split(/\\r?\\n/).map(w => w.trim().toUpperCase());\n        setDictionary(new Set(words));\n      });\n  }, []);\n\n  // Get the word from selected cells in order\n  const selectedWord = selected.map(([i, j]) => board[i]?.[j] || '').join('');\n\n  // Handle cell click\n  const handleCellClick = (i: number, j: number) => {\n    if (gameOver) return;\n    const idx = selected.findIndex(([x, y]) => x === i && y === j);\n    let newSelected: [number, number][];\n    if (idx !== -1) {\n      newSelected = selected.slice(0, idx).concat(selected.slice(idx + 1));\n    } else {\n      newSelected = [...selected, [i, j]];\n    }\n    setSelected(newSelected);\n    setError(null);\n  };\n\n  // Handle submit\n  const handleSubmit = () => {\n    if (gameOver) return;\n    if (selected.length < 2) {\n      setError('Word must be at least 2 letters.');\n      return;\n    }\n    if (!isContiguous(selected)) {\n      setError('Selected letters must be contiguous.');\n      return;\n    }\n    if (moves.length === 0 && !selected.some(([i, j]) => i === center[0] && j === center[1])) {\n      setError('First word must include the center square.');\n      return;\n    }\n    if (!dictionary) {\n      setError('Dictionary not loaded yet.');\n      return;\n    }\n    const word = selectedWord.toUpperCase();\n    if (!dictionary.has(word)) {\n      setError('Word not in dictionary.');\n      return;\n    }\n    const score = getScore(word);\n    setMoves([...moves, { player: turn, word, positions: [...selected], score }]);\n    setScores(s => ({ ...s, [turn]: s[turn] + score }));\n    setTurn(turn === 'Player 1' ? 'Player 2' : 'Player 1');\n    setSelected([]);\n    setError(null);\n  };\n\n  // End game logic (simple: after 30 moves or manual end)\n  useEffect(() => {\n    if (moves.length >= 30) {\n      setGameOver(true);\n      if (scores['Player 1'] > scores['Player 2']) setWinner('Player 1');\n      else if (scores['Player 2'] > scores['Player 1']) setWinner('Player 2');\n      else setWinner('Draw');\n    }\n  }, [moves, scores]);\n\n  const handleEndGame = () => {\n    setGameOver(true);\n    if (scores['Player 1'] > scores['Player 2']) setWinner('Player 1');\n    else if (scores['Player 2'] > scores['Player 1']) setWinner('Player 2');\n    else setWinner('Draw');\n  };\n\n  const handleRestart = () => {\n    setBoard(generateBoard());\n    setTurn('Player 1');\n    setSelected([]);\n    setError(null);\n    setMoves([]);\n    setScores({ 'Player 1': 0, 'Player 2': 0 });\n    setGameOver(false);\n    setWinner(null);\n  };\n\n  // Helper to get cell color based on moves\n  function getCellColor(i: number, j: number, moves: { player: string, positions: [number, number][] }[]) {\n    // Find the most recent move that includes this cell\n    for (let k = moves.length - 1; k >= 0; k--) {\n      if (moves[k].positions.some(([x, y]) => x === i && y === j)) {\n        return moves[k].player === 'Player 1' ? '#ffcccc' : '#cce0ff'; // red for P1, blue for P2\n      }\n    }\n    // Center square highlight\n    if (i === center[0] && j === center[1]) return '#ffe680';\n    return '#fff';\n  }\n\n  const isCellClaimed = (i: number, j: number, moves: { positions: [number, number][] }[]) => {\n    return moves.some(move => move.positions.some(([x, y]) => x === i && y === j));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Word Strategy Game (Local Two-Player)</h1>\n      <div><strong>Current Turn:</strong> {turn}</div>\n      <div style={{ margin: '10px 0' }}>\n        <strong>Scores:</strong> Player 1: {scores['Player 1']} | Player 2: {scores['Player 2']}\n      </div>\n      {gameOver && (\n        <div style={{ background: '#eee', padding: 20, borderRadius: 8, margin: 20 }}>\n          <h2>Game Over</h2>\n          {winner === 'Draw' ? <div><strong>It's a draw!</strong></div> : <div><strong>{winner} wins!</strong></div>}\n          <button onClick={handleRestart}>Restart Game</button>\n        </div>\n      )}\n      <div style={{ display: 'inline-block', border: '2px solid #333', marginTop: 20 }}>\n        {board.map((row, i) => (\n          <div key={i} style={{ display: 'flex' }}>\n            {row.map((cell, j) => {\n              const isSelected = selected.some(([x, y]) => x === i && y === j);\n              const claimed = isCellClaimed(i, j, moves);\n              return (\n                <div\n                  key={j}\n                  onClick={() => {\n                    if (!claimed) handleCellClick(i, j);\n                  }}\n                  style={{\n                    width: 28,\n                    height: 28,\n                    border: '1px solid #aaa',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontWeight: 'bold',\n                    fontSize: 18,\n                    background: isSelected\n                      ? '#90ee90'\n                      : getCellColor(i, j, moves),\n                    cursor: claimed || gameOver ? 'not-allowed' : 'pointer',\n                    userSelect: 'none',\n                    opacity: claimed ? 0.6 : 1,\n                  }}\n                >\n                  {cell}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n      <div style={{ marginTop: 20 }}>\n        <strong>Selected Word:</strong> {selectedWord}\n      </div>\n      <button onClick={handleSubmit} disabled={selected.length === 0 || gameOver} style={{ marginTop: 10 }}>\n        Submit Word\n      </button>\n      <button onClick={handleEndGame} style={{ marginLeft: 10 }}>End Game</button>\n      {error && <div style={{ color: 'red', marginTop: 10 }}>{error}</div>}\n      <div style={{ marginTop: 30, textAlign: 'left', maxWidth: 600, marginLeft: 'auto', marginRight: 'auto' }}>\n        <h2>Move History</h2>\n        <ol>\n          {moves.map((move, idx) => (\n            <li key={idx}>\n              <strong>{move.player}:</strong> {move.word} ({move.score} pts)\n            </li>\n          ))}\n        </ol>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}